{
  "_args": [
    [
      {
        "raw": "fetch-jsonp@^1.0.6",
        "scope": null,
        "escapedName": "fetch-jsonp",
        "name": "fetch-jsonp",
        "rawSpec": "^1.0.6",
        "spec": ">=1.0.6 <2.0.0",
        "type": "range"
      },
      "/home/orionstark/Documents/MusicSpectrum/node_modules/p5"
    ]
  ],
  "_from": "fetch-jsonp@>=1.0.6 <2.0.0",
  "_id": "fetch-jsonp@1.1.3",
  "_inCache": true,
  "_location": "/fetch-jsonp",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fetch-jsonp-1.1.3.tgz_1504148464380_0.19407203723676503"
  },
  "_npmUser": {
    "name": "camsong",
    "email": "neosoyn@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fetch-jsonp@^1.0.6",
    "scope": null,
    "escapedName": "fetch-jsonp",
    "name": "fetch-jsonp",
    "rawSpec": "^1.0.6",
    "spec": ">=1.0.6 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/p5"
  ],
  "_resolved": "https://registry.npmjs.org/fetch-jsonp/-/fetch-jsonp-1.1.3.tgz",
  "_shasum": "9eb9e585ba08aaf700563538d17bbebbcd5a3db2",
  "_shrinkwrap": null,
  "_spec": "fetch-jsonp@^1.0.6",
  "_where": "/home/orionstark/Documents/MusicSpectrum/node_modules/p5",
  "author": {
    "name": "Cam Song"
  },
  "bugs": {
    "url": "https://github.com/camsong/fetch-jsonp/issues"
  },
  "dependencies": {},
  "description": "Fetch JSONP like a boss using Fetch API",
  "devDependencies": {
    "babel": "^5.8.21",
    "babel-core": "^5.8.21",
    "babel-eslint": "^4.0.5",
    "chai": "^3.2.0",
    "eslint": "^1.1.0",
    "eslint-config-airbnb": "^0.0.7",
    "eslint-plugin-react": "^3.2.1",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "9eb9e585ba08aaf700563538d17bbebbcd5a3db2",
    "tarball": "https://registry.npmjs.org/fetch-jsonp/-/fetch-jsonp-1.1.3.tgz"
  },
  "gitHead": "0dfd008b28fe230f3543a075aeabb7b4da408a95",
  "homepage": "https://github.com/camsong/fetch-jsonp#readme",
  "keywords": [
    "fetch",
    "jsonp",
    "github fetch",
    "ajax"
  ],
  "license": "MIT",
  "main": "build/fetch-jsonp.js",
  "maintainers": [
    {
      "name": "camsong",
      "email": "neosoyn@gmail.com"
    }
  ],
  "name": "fetch-jsonp",
  "optionalDependencies": {},
  "readme": "# Fetch JSONP [![Build Status](https://travis-ci.org/camsong/fetch-jsonp.svg)](https://travis-ci.org/camsong/fetch-jsonp) [![npm version](https://badge.fury.io/js/fetch-jsonp.svg)](http://badge.fury.io/js/fetch-jsonp) [![npm downloads](https://img.shields.io/npm/dm/fetch-jsonp.svg?style=flat-square)](https://www.npmjs.com/package/fetch-jsonp)\n\nJSONP is NOT supported in standard Fetch API, https://fetch.spec.whatwg.org.\nfetch-jsonp provides you same API to fetch JSONP like native Fetch, also comes\nwith global `fetchJsonp` function.\n\nIf you need a `fetch` polyfill for old browsers, try [github/fetch](http://github.com/github/fetch).\n\n## Installation\n\nYou can install with `npm`.\n\n```\nnpm install fetch-jsonp\n```\n\n## Promise Polyfill for IE\n\nIE8/9/10/11 does not support [ES6 Promise](https://tc39.github.io/ecma262/#sec-promise-constructor), run this to polyfill the global environment at the beginning of your application.\n\n```js\nrequire('es6-promise').polyfill();\n```\n\n## Usage\n\nJSONP only supports GET method, same as `fetch-jsonp`.\n\n### Fetch JSONP in simple way\n\n```javascript\nfetchJsonp('/users.jsonp')\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Set JSONP callback parameter name, default is 'callback'\n\n```javascript\nfetchJsonp('/users.jsonp', {\n    jsonpCallback: 'custom_callback',\n  })\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Set JSONP callback function name, default is a random number with `json_` prefix\n\n```javascript\nfetchJsonp('/users.jsonp', {\n    jsonpCallbackFunction: 'function_name_of_jsonp_response'\n  })\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Set JSONP request timeout, default is 5000ms\n\n```javascript\nfetchJsonp('/users.jsonp', {\n    timeout: 3000,\n  })\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Difference between `jsonpCallback` and `jsonCallbackFunction`\nThere two functions can easily be confused with each other, but there is a clear distinction.\n\nDefault values are\n* `jsonpCallback`, default value is `callback`. It's the name of the callback parameter\n* `jsonCallbackFunction`, default value is `null`. It's the name of the callback function. In order to make it distinct, it's a random string with `jsonp_` prefix like `jsonp_1497658186785_39551`. Leave it blank if it's set by the server, set it explicitly if the callback function name is fixed.\n\n##### Case 1:\n```js\nfetchJsonp('/users.jsonp', {\n  jsonpCallback: 'cb'\n})\n```\nThe request url will be `/users.jsonp?cb=jsonp_1497658186785_39551`, and the server should respond with a function like:\n```js\njsonp_1497658186785_39551(\n  { ...data here... }\n)\n```\n\n##### Case 2:\n```js\nfetchJsonp('/users.jsonp', {\n  jsonpCallbackFunction: 'search_results'\n})\n```\nThe request url will be `/users.jsonp?callback=search_results`, and the server should always respond with a function named `search_results` like:\n```js\nsearch_results(\n  { ...data here... }\n)\n```\n\n### Caveats\n\n#### 1. You need to call `.then(function(response) { return response.json(); })` in order to keep consistent with Fetch API.\n\n#### 2. `Uncaught SyntaxError: Unexpected token :` error\n\nMore than likely, you are calling a JSON api, which does not support JSONP. The difference is that JSON api responds with an object like `{\"data\": 123}` and will throw the error above when being executed as a function. On the other hand, JSONP will respond with a function wrapped object like `jsonp_123132({data: 123})`.\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_7-8/internet-explorer_7-8_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png)\n--- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | 8+ ✔ | Latest ✔ | 6.1+ ✔ |\n\n# License\n\nMIT\n\n# Acknowledgement\n\nThanks to [github/fetch](https://github.com/github/fetch) for bring Fetch to old browsers.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/camsong/fetch-jsonp.git"
  },
  "scripts": {
    "build": "babel src/ --modules umd --out-dir build",
    "clean": "rm -rf build",
    "lint": "eslint src/ test/",
    "prepublish": "npm run lint && npm run clean && npm run build",
    "test": "mocha --compilers js:babel/register --recursive --ui bdd --reporter spec"
  },
  "version": "1.1.3"
}
